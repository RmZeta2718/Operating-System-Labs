	对读入的cmd先处理重定向和bg
	然后按管道分割符|分词，分出的每一项就是管道中的一个指令
	对每个指令再按空白字符分词，得到指令的各个参数
	用一个for循环处理管道，在循环中利用pipe()函数获得管道fd
	循环体内调用fork()产生子进程，对应管道中的每个命令，循环体外（管道的所有命令都开始执行之后）调用waitpid()回收。不应该在循环体内回收，因为这样会降低并发性。为了知道需要回收哪个子进程（还有可能存在bg的子进程），需要用数组记录子进程pid
	通过与重定向类似的方法改变子进程的输入输出流（fork之后，execvp之前）。需要注意的是，必须及时关闭不需要的流，只有所有管道输出端的引用都关闭之后才能在该管道的输入端读到EOF，这样才能让某些程序正常退出。
	程序中进行了一些特判，以适应单个指令（无管道）的情况，减少代码冗余

